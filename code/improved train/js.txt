var listOption =
[["Entities","Entity 1","Entity 2","Entity 3","Entity 4","Entity 5","Entity 6","Entity 7","Entity 8"]];
var listValues =
[
["-","Entity 1","Entity 2","Entity 3","Entity 4","Entity 5","Entity 6","Entity 7","Entity 8"]
];
var bigListValues = [];
for(var i=0;i<listValues.length;i++){
    for (var j=0;j<listValues[i].length;j++){
        if(j != 0){
            bigListValues[bigListValues.length] = listValues[i][j];
        }
    }
}

exports.Task = extend(TolokaHandlebarsTask, function (options) {
    TolokaHandlebarsTask.call(this, options);
}, {
	onRender: function() {
        var field = this.getField('result1');
        var editor = field.getEditor();
        editor.annotationInterface = field.createAnnotationInterface({
            createInterfaceElement: function() {
                this._select = document.createElement('select');
                for(var j=0;j<listOption.length;j++){
                    var listGroup = listOption[j];
                    var valuesGroup = listValues[j];
                    var optgroup = document.createElement("optgroup");
                    optgroup.setAttribute('label', listGroup[0]);
                    for (var i = 1; i < listGroup.length; i++) {
                        var option = document.createElement("option");
                        if (i == 0) {
                            option.setAttribute('disabled', 'disabled');
                        }
                        option.value = valuesGroup[i];
                        option.className = "seletOpt";
                        var oText = document.createTextNode(listGroup[i]);
                        option.appendChild(oText);
                        optgroup.appendChild(option);
                    }
                    this._select.appendChild(optgroup);
                }
                this._select.addEventListener('change', function() {
                    this._shape.annotation = this._select.value;
                    _.each(bigListValues, function(value) {
                        this._polygonEl.classList.remove(value.toLowerCase());
                    }.bind(this));
                    this._polygonEl.classList.add(this._select.value.toLowerCase());
                }.bind(this));
                return this._select;
            },
            onShow: function(shape, el) {
                console.log("shape: ", shape)
                console.log("el: ", el)
                this._shape = shape;
                this._select.value = shape.annotation;
                this._polygonEl = el;
            }
        });
    },
    getTemplateData: function() {
        var data = TolokaHandlebarsTask.prototype.getTemplateData.apply(this, arguments);

        data.features = ['Uppertail coverts', 'Rump', 'Mantle', 'Nape', 'Ear coverts', 'Crown', 'Forehead', 'Lore', 'Beak', 'Chin', 'Throat', 'Wing', 'Breast', 'Belly', 'Flank', 'Feet', 'Vent', 'Tail' ];

        return data;
    },
    _renderTextArea: function (speech) {
        if (!speech) speech = false;
        var field = this.getDOMElement().querySelector('[name="user_text"]');

        if (field) {
            var readonly = speech && speech !== 'OK';
            var parent = field.parentNode;

            parent.classList.toggle('textarea_readonly', readonly);
            field.toggleAttribute('readonly', readonly);

            if (speech === 'OK') {
                $(field).trigger('keyup');
                field.focus();
            }
        }
    },

    setSolutionOutputValues: function (values) {
        TolokaHandlebarsTask.prototype.setSolutionOutputValues.call(this, values);

        this._renderTextArea(values.speech);
    }
});

function extend(ParentClass, constructorFunction, prototypeHash) {
    constructorFunction = constructorFunction || function () { };

    prototypeHash = prototypeHash || {};

    if (ParentClass) {
        constructorFunction.prototype = Object.create(ParentClass.prototype);
    }

    for (var i in prototypeHash) {
        constructorFunction.prototype[i] = prototypeHash[i];
    }

    return constructorFunction;
}